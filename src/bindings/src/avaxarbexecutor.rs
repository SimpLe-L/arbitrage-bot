/**

Generated by the following Solidity interface...
```solidity
interface AvaxArbExecutor {
    struct ArbParams {
        address tokenIn;
        uint256 amountIn;
        bytes swapData;
        address profitToken;
        uint256 minProfit;
        bytes32 tag;
    }

    error InvalidCallback();
    error NotOwner();
    error NotProfitable();
    error TransferFailed();

    event ArbExecuted(address indexed token, uint256 profit, bytes32 indexed tag);

    constructor();

    receive() external payable;

    function AAVE_POOL() external view returns (address);
    function emergencyWithdraw(address token) external;
    function emergencyWithdrawNative() external;
    function executeArb(ArbParams memory params) external;
    function executeArbWithFlash(ArbParams memory params) external;
    function executeOperation(address asset, uint256 amount, uint256 premium, address initiator, bytes memory params) external returns (bool);
    function owner() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "AAVE_POOL",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IAaveV3Pool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "emergencyWithdraw",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "emergencyWithdrawNative",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "executeArb",
    "inputs": [
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct AvaxArbExecutor.ArbParams",
        "components": [
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountIn",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "swapData",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "profitToken",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "minProfit",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "tag",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "executeArbWithFlash",
    "inputs": [
      {
        "name": "params",
        "type": "tuple",
        "internalType": "struct AvaxArbExecutor.ArbParams",
        "components": [
          {
            "name": "tokenIn",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amountIn",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "swapData",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "profitToken",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "minProfit",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "tag",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "executeOperation",
    "inputs": [
      {
        "name": "asset",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "premium",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "initiator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "params",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "ArbExecuted",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "profit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "tag",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "InvalidCallback",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotOwner",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotProfitable",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TransferFailed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AvaxArbExecutor {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a080604052346100455733608052611461908161004a823960805181818160bc0152818161011d015281816102f00152818161059001528181610bbd0152610dfe0152f35b5f80fdfe6080604052600436101561001a575b3615610018575f80fd5b005b5f5f3560e01c806307eb213514610db957806308a0167514610d6d5780631b11d0ff146108a15780633f71f2501461058057806346fe962c146102ca5780636ff1c9bc146100e357638da5cb5b14610072575061000e565b346100e057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e057602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b80fd5b50346100e05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e05761011b610e45565b7f00000000000000000000000000000000000000000000000000000000000000009073ffffffffffffffffffffffffffffffffffffffff821633036102a25773ffffffffffffffffffffffffffffffffffffffff16906040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152602081602481865afa908115610297578491610261575b50806101be578380f35b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9290921660048301526024820152906020908290604490829086905af1801561025657610227575b80808380f35b6102489060203d60201161024f575b6102408183610ef8565b810190610fe3565b505f610221565b503d610236565b6040513d84823e3d90fd5b90506020813d60201161028f575b8161027c60209383610ef8565b8101031261028b57515f6101b4565b5f80fd5b3d915061026f565b6040513d86823e3d90fd5b6004837f30cd7471000000000000000000000000000000000000000000000000000000008152fd5b503461028b576102d936610e89565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361055857604051602081016020815273ffffffffffffffffffffffffffffffffffffffff61033f84610e68565b16604083015260208301359283606084015260408101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561028b5781019060208235920167ffffffffffffffff831161028b57823603811361028b57610120857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8661045d976104589660c0608087015281610100870152868601375f85828601015273ffffffffffffffffffffffffffffffffffffffff61040d60608901610e68565b1660a0850152608087013560c085015260a087013560e08501520116810103017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101865285610ef8565b611008565b9173794a61358d6845594f94dc1db02a252b5b4814ad3b1561028b575f927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f73ffffffffffffffffffffffffffffffffffffffff9460c49460405198899788967f42b0b77c000000000000000000000000000000000000000000000000000000008852306004890152166024870152604486015260a060648601525180918160a48701528686015e86858286010152866084850152011681010301818373794a61358d6845594f94dc1db02a252b5b4814ad5af1801561054d57610541575080f35b61001891505f90610ef8565b6040513d5f823e3d90fd5b7f30cd7471000000000000000000000000000000000000000000000000000000005f5260045ffd5b3461028b5761058e36610e89565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff811633036105585760608201906024602073ffffffffffffffffffffffffffffffffffffffff6105f385611008565b16604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa90811561054d575f9161086f575b5060408401357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18536030181121561028b5784019081359167ffffffffffffffff831161028b57602001823603811361028b5761069861069d916024943691610f73565b611067565b602073ffffffffffffffffffffffffffffffffffffffff6106bd86611008565b16604051938480927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa801561054d575f9061083b575b6107079250610ffb565b9160808401358310610813576020836107939373ffffffffffffffffffffffffffffffffffffffff61073885611008565b16905f6040518097819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af190811561054d5760a06107e973ffffffffffffffffffffffffffffffffffffffff927f321ae10f17e879f1edb9b9cf44e3d8ba26c2dba15b6d985faf2fe32955675595956020956107f8575b50611008565b956040519586520135941692a3005b61080e90863d881161024f576102408183610ef8565b6107e3565b7fa5adf0af000000000000000000000000000000000000000000000000000000005f5260045ffd5b506020823d602011610867575b8161085560209383610ef8565b8101031261028b5761070791516106fd565b3d9150610848565b90506020813d602011610899575b8161088a60209383610ef8565b8101031261028b575184610634565b3d915061087d565b3461028b5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028b576108d8610e45565b6064359073ffffffffffffffffffffffffffffffffffffffff821680920361028b576084359067ffffffffffffffff821161028b573660238301121561028b57816004013567ffffffffffffffff811161028b57820191602483019336851161028b5773794a61358d6845594f94dc1db02a252b5b4814ad331490811591610d62575b50610d3a5760208184031261028b57602481013567ffffffffffffffff811161028b57019160c0908390031261028b576040519260c0840184811067ffffffffffffffff821117610d0d576040526109b560248401610e68565b845260448301356020850152606483013567ffffffffffffffff811161028b576024908401019080601f8301121561028b578160206109f693359101610f73565b906040840191825273ffffffffffffffffffffffffffffffffffffffff610a1f60848501610e68565b926020606087019480865260c460a060808a019960a48a01358b520197013587526024604051809581937f70a08231000000000000000000000000000000000000000000000000000000008352306004840152165afa91821561054d575f92610cc5575b5073ffffffffffffffffffffffffffffffffffffffff92610aa660209251611067565b6044610ab58135602435610fa9565b5f60405196879485937fa9059cbb00000000000000000000000000000000000000000000000000000000855273794a61358d6845594f94dc1db02a252b5b4814ad60048601526024850152165af191821561054d57602492610ca8575b50602073ffffffffffffffffffffffffffffffffffffffff845116604051938480927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa801561054d575f90610c74575b610b769250610ffb565b925183106108135780516040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690529091602091839160449183915f91165af1801561054d577f321ae10f17e879f1edb9b9cf44e3d8ba26c2dba15b6d985faf2fe329556755959260209273ffffffffffffffffffffffffffffffffffffffff92610c59575b505116925193604051908152a3602060405160018152f35b610c6f90843d861161024f576102408183610ef8565b610c41565b506020823d602011610ca0575b81610c8e60209383610ef8565b8101031261028b57610b769151610b6c565b3d9150610c81565b610cc09060203d60201161024f576102408183610ef8565b610b12565b9091506020813d602011610d05575b81610ce160209383610ef8565b8101031261028b57519073ffffffffffffffffffffffffffffffffffffffff610a83565b3d9150610cd4565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7ff7a632f5000000000000000000000000000000000000000000000000000000005f5260045ffd5b90503014158561095b565b3461028b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028b57602060405173794a61358d6845594f94dc1db02a252b5b4814ad8152f35b3461028b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028b5773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803303610558575f808080934790828215610e3c575bf11561054d57005b506108fc610e34565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361028b57565b359073ffffffffffffffffffffffffffffffffffffffff8216820361028b57565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261028b576004359067ffffffffffffffff821161028b577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8260c09203011261028b5760040190565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d0d57604052565b67ffffffffffffffff8111610d0d57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192610f7f82610f39565b91610f8d6040519384610ef8565b82948184528183011161028b578281602093845f960137010152565b91908201809211610fb657565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9081602091031261028b5751801515810361028b5790565b91908203918211610fb657565b3573ffffffffffffffffffffffffffffffffffffffff8116810361028b5790565b90815181101561103a570160200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b80511561103a57602081015160f81c905f9060015b8360ff84161061108c5750505050565b600161109a60ff92846110ed565b9301169161107c565b519073ffffffffffffffffffffffffffffffffffffffff8216820361028b57565b9081606091031261028b576110d8816110a3565b9160406110e7602084016110a3565b92015190565b905f906110fa8184611029565b5160f81c6001820193848311610fb65784916001810361120e57509061111f91611380565b60608180518101031261028b57611138602082016110a3565b9073ffffffffffffffffffffffffffffffffffffffff60606040830151920151921691823b1561028b5760a45f928360405195869485937f022c0d9f00000000000000000000000000000000000000000000000000000000855260048501526024840152306044840152608060648401528160848401525af1801561054d576111f8575b506055018092116111cb575090565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fd5b6112059192505f90610ef8565b5f9060556111bc565b909350600281036112ec57505f73ffffffffffffffffffffffffffffffffffffffff806112516112436020956112af98611380565b8580825183010191016110c4565b94919390604051988996879586937fa9059cbb00000000000000000000000000000000000000000000000000000000855216600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0393165af191821561054d576055926112cf575b5001809111610fb65790565b6112e79060203d60201161024f576102408183610ef8565b6112c3565b6003146112f95750505090565b5f73ffffffffffffffffffffffffffffffffffffffff806113226112436020956112af98611380565b94919390604051988996879586937f095ea7b300000000000000000000000000000000000000000000000000000000855216600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b9061138b6054610f39565b916113996040519384610ef8565b605483527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06113c86054610f39565b013660208501375f5b605481106113df5750505090565b807fff0000000000000000000000000000000000000000000000000000000000000061141661141060019487610fa9565b85611029565b51165f1a6114248287611029565b53016113d156fea2646970667358221220891b61d0a4cf4fa06f0e230d5f825349fabcbc5ce40ea5dc14ee39b6df25f66e64736f6c634300081e0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0\x80`@R4a\0EW3`\x80Ra\x14a\x90\x81a\0J\x829`\x80Q\x81\x81\x81`\xBC\x01R\x81\x81a\x01\x1D\x01R\x81\x81a\x02\xF0\x01R\x81\x81a\x05\x90\x01R\x81\x81a\x0B\xBD\x01Ra\r\xFE\x01R\xF3[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x1AW[6\x15a\0\x18W_\x80\xFD[\0[__5`\xE0\x1C\x80c\x07\xEB!5\x14a\r\xB9W\x80c\x08\xA0\x16u\x14a\rmW\x80c\x1B\x11\xD0\xFF\x14a\x08\xA1W\x80c?q\xF2P\x14a\x05\x80W\x80cF\xFE\x96,\x14a\x02\xCAW\x80co\xF1\xC9\xBC\x14a\0\xE3Wc\x8D\xA5\xCB[\x14a\0rWPa\0\x0EV[4a\0\xE0W\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\xE0W` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[\x80\xFD[P4a\0\xE0W` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\xE0Wa\x01\x1Ba\x0EEV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x163\x03a\x02\xA2Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90`@Q\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R` \x81`$\x81\x86Z\xFA\x90\x81\x15a\x02\x97W\x84\x91a\x02aW[P\x80a\x01\xBEW\x83\x80\xF3[`@Q\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x90\x92\x16`\x04\x83\x01R`$\x82\x01R\x90` \x90\x82\x90`D\x90\x82\x90\x86\x90Z\xF1\x80\x15a\x02VWa\x02'W[\x80\x80\x83\x80\xF3[a\x02H\x90` =` \x11a\x02OW[a\x02@\x81\x83a\x0E\xF8V[\x81\x01\x90a\x0F\xE3V[P_a\x02!V[P=a\x026V[`@Q=\x84\x82>=\x90\xFD[\x90P` \x81=` \x11a\x02\x8FW[\x81a\x02|` \x93\x83a\x0E\xF8V[\x81\x01\x03\x12a\x02\x8BWQ_a\x01\xB4V[_\x80\xFD[=\x91Pa\x02oV[`@Q=\x86\x82>=\x90\xFD[`\x04\x83\x7F0\xCDtq\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xFD[P4a\x02\x8BWa\x02\xD96a\x0E\x89V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x163\x03a\x05XW`@Q` \x81\x01` \x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x03?\x84a\x0EhV[\x16`@\x83\x01R` \x83\x015\x92\x83``\x84\x01R`@\x81\x015\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x826\x03\x01\x81\x12\x15a\x02\x8BW\x81\x01\x90` \x825\x92\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x8BW\x826\x03\x81\x13a\x02\x8BWa\x01 \x85\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x86a\x04]\x97a\x04X\x96`\xC0`\x80\x87\x01R\x81a\x01\0\x87\x01R\x86\x86\x017_\x85\x82\x86\x01\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x04\r``\x89\x01a\x0EhV[\x16`\xA0\x85\x01R`\x80\x87\x015`\xC0\x85\x01R`\xA0\x87\x015`\xE0\x85\x01R\x01\x16\x81\x01\x03\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x86R\x85a\x0E\xF8V[a\x10\x08V[\x91syJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD;\x15a\x02\x8BW_\x92\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1Fs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94`\xC4\x94`@Q\x98\x89\x97\x88\x96\x7FB\xB0\xB7|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88R0`\x04\x89\x01R\x16`$\x87\x01R`D\x86\x01R`\xA0`d\x86\x01RQ\x80\x91\x81`\xA4\x87\x01R\x86\x86\x01^\x86\x85\x82\x86\x01\x01R\x86`\x84\x85\x01R\x01\x16\x81\x01\x03\x01\x81\x83syJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xADZ\xF1\x80\x15a\x05MWa\x05AWP\x80\xF3[a\0\x18\x91P_\x90a\x0E\xF8V[`@Q=_\x82>=\x90\xFD[\x7F0\xCDtq\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x02\x8BWa\x05\x8E6a\x0E\x89V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x163\x03a\x05XW``\x82\x01\x90`$` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x05\xF3\x85a\x10\x08V[\x16`@Q\x92\x83\x80\x92\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R0`\x04\x83\x01RZ\xFA\x90\x81\x15a\x05MW_\x91a\x08oW[P`@\x84\x015\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x856\x03\x01\x81\x12\x15a\x02\x8BW\x84\x01\x90\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x8BW` \x01\x826\x03\x81\x13a\x02\x8BWa\x06\x98a\x06\x9D\x91`$\x946\x91a\x0FsV[a\x10gV[` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x06\xBD\x86a\x10\x08V[\x16`@Q\x93\x84\x80\x92\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R0`\x04\x83\x01RZ\xFA\x80\x15a\x05MW_\x90a\x08;W[a\x07\x07\x92Pa\x0F\xFBV[\x91`\x80\x84\x015\x83\x10a\x08\x13W` \x83a\x07\x93\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x078\x85a\x10\x08V[\x16\x90_`@Q\x80\x97\x81\x95\x82\x94\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01` \x90\x93\x92\x91\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@\x82\x01\x95\x16\x81R\x01RV[\x03\x92Z\xF1\x90\x81\x15a\x05MW`\xA0a\x07\xE9s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x7F2\x1A\xE1\x0F\x17\xE8y\xF1\xED\xB9\xB9\xCFD\xE3\xD8\xBA&\xC2\xDB\xA1[m\x98_\xAF/\xE3)UgU\x95\x95` \x95a\x07\xF8W[Pa\x10\x08V[\x95`@Q\x95\x86R\x015\x94\x16\x92\xA3\0[a\x08\x0E\x90\x86=\x88\x11a\x02OWa\x02@\x81\x83a\x0E\xF8V[a\x07\xE3V[\x7F\xA5\xAD\xF0\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[P` \x82=` \x11a\x08gW[\x81a\x08U` \x93\x83a\x0E\xF8V[\x81\x01\x03\x12a\x02\x8BWa\x07\x07\x91Qa\x06\xFDV[=\x91Pa\x08HV[\x90P` \x81=` \x11a\x08\x99W[\x81a\x08\x8A` \x93\x83a\x0E\xF8V[\x81\x01\x03\x12a\x02\x8BWQ\x84a\x064V[=\x91Pa\x08}V[4a\x02\x8BW`\xA0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x8BWa\x08\xD8a\x0EEV[`d5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x80\x92\x03a\x02\x8BW`\x845\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02\x8BW6`#\x83\x01\x12\x15a\x02\x8BW\x81`\x04\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x8BW\x82\x01\x91`$\x83\x01\x936\x85\x11a\x02\x8BWsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD3\x14\x90\x81\x15\x91a\rbW[Pa\r:W` \x81\x84\x03\x12a\x02\x8BW`$\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x8BW\x01\x91`\xC0\x90\x83\x90\x03\x12a\x02\x8BW`@Q\x92`\xC0\x84\x01\x84\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\r\rW`@Ra\t\xB5`$\x84\x01a\x0EhV[\x84R`D\x83\x015` \x85\x01R`d\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x8BW`$\x90\x84\x01\x01\x90\x80`\x1F\x83\x01\x12\x15a\x02\x8BW\x81` a\t\xF6\x935\x91\x01a\x0FsV[\x90`@\x84\x01\x91\x82Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\n\x1F`\x84\x85\x01a\x0EhV[\x92` ``\x87\x01\x94\x80\x86R`\xC4`\xA0`\x80\x8A\x01\x99`\xA4\x8A\x015\x8BR\x01\x97\x015\x87R`$`@Q\x80\x95\x81\x93\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R0`\x04\x84\x01R\x16Z\xFA\x91\x82\x15a\x05MW_\x92a\x0C\xC5W[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92a\n\xA6` \x92Qa\x10gV[`Da\n\xB5\x815`$5a\x0F\xA9V[_`@Q\x96\x87\x94\x85\x93\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85RsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD`\x04\x86\x01R`$\x85\x01R\x16Z\xF1\x91\x82\x15a\x05MW`$\x92a\x0C\xA8W[P` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84Q\x16`@Q\x93\x84\x80\x92\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R0`\x04\x83\x01RZ\xFA\x80\x15a\x05MW_\x90a\x0CtW[a\x0Bv\x92Pa\x0F\xFBV[\x92Q\x83\x10a\x08\x13W\x80Q`@Q\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x16`\x04\x83\x01R`$\x82\x01\x86\x90R\x90\x91` \x91\x83\x91`D\x91\x83\x91_\x91\x16Z\xF1\x80\x15a\x05MW\x7F2\x1A\xE1\x0F\x17\xE8y\xF1\xED\xB9\xB9\xCFD\xE3\xD8\xBA&\xC2\xDB\xA1[m\x98_\xAF/\xE3)UgU\x95\x92` \x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92a\x0CYW[PQ\x16\x92Q\x93`@Q\x90\x81R\xA3` `@Q`\x01\x81R\xF3[a\x0Co\x90\x84=\x86\x11a\x02OWa\x02@\x81\x83a\x0E\xF8V[a\x0CAV[P` \x82=` \x11a\x0C\xA0W[\x81a\x0C\x8E` \x93\x83a\x0E\xF8V[\x81\x01\x03\x12a\x02\x8BWa\x0Bv\x91Qa\x0BlV[=\x91Pa\x0C\x81V[a\x0C\xC0\x90` =` \x11a\x02OWa\x02@\x81\x83a\x0E\xF8V[a\x0B\x12V[\x90\x91P` \x81=` \x11a\r\x05W[\x81a\x0C\xE1` \x93\x83a\x0E\xF8V[\x81\x01\x03\x12a\x02\x8BWQ\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\n\x83V[=\x91Pa\x0C\xD4V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x7F\xF7\xA62\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x90P0\x14\x15\x85a\t[V[4a\x02\x8BW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x8BW` `@QsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD\x81R\xF3[4a\x02\x8BW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x8BWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x803\x03a\x05XW_\x80\x80\x80\x93G\x90\x82\x82\x15a\x0E<W[\xF1\x15a\x05MW\0[Pa\x08\xFCa\x0E4V[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\x8BWV[5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\x8BWV[` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC\x82\x01\x12a\x02\x8BW`\x045\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02\x8BW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC\x82`\xC0\x92\x03\x01\x12a\x02\x8BW`\x04\x01\x90V[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\r\rW`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\r\rW`\x1F\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16` \x01\x90V[\x92\x91\x92a\x0F\x7F\x82a\x0F9V[\x91a\x0F\x8D`@Q\x93\x84a\x0E\xF8V[\x82\x94\x81\x84R\x81\x83\x01\x11a\x02\x8BW\x82\x81` \x93\x84_\x96\x017\x01\x01RV[\x91\x90\x82\x01\x80\x92\x11a\x0F\xB6WV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\x02\x8BWQ\x80\x15\x15\x81\x03a\x02\x8BW\x90V[\x91\x90\x82\x03\x91\x82\x11a\x0F\xB6WV[5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x02\x8BW\x90V[\x90\x81Q\x81\x10\x15a\x10:W\x01` \x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x80Q\x15a\x10:W` \x81\x01Q`\xF8\x1C\x90_\x90`\x01[\x83`\xFF\x84\x16\x10a\x10\x8CWPPPPV[`\x01a\x10\x9A`\xFF\x92\x84a\x10\xEDV[\x93\x01\x16\x91a\x10|V[Q\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\x8BWV[\x90\x81``\x91\x03\x12a\x02\x8BWa\x10\xD8\x81a\x10\xA3V[\x91`@a\x10\xE7` \x84\x01a\x10\xA3V[\x92\x01Q\x90V[\x90_\x90a\x10\xFA\x81\x84a\x10)V[Q`\xF8\x1C`\x01\x82\x01\x93\x84\x83\x11a\x0F\xB6W\x84\x91`\x01\x81\x03a\x12\x0EWP\x90a\x11\x1F\x91a\x13\x80V[``\x81\x80Q\x81\x01\x03\x12a\x02\x8BWa\x118` \x82\x01a\x10\xA3V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF```@\x83\x01Q\x92\x01Q\x92\x16\x91\x82;\x15a\x02\x8BW`\xA4_\x92\x83`@Q\x95\x86\x94\x85\x93\x7F\x02,\r\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R`\x04\x85\x01R`$\x84\x01R0`D\x84\x01R`\x80`d\x84\x01R\x81`\x84\x84\x01RZ\xF1\x80\x15a\x05MWa\x11\xF8W[P`U\x01\x80\x92\x11a\x11\xCBWP\x90V[\x80\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`$\x92R`\x11`\x04R\xFD[a\x12\x05\x91\x92P_\x90a\x0E\xF8V[_\x90`Ua\x11\xBCV[\x90\x93P`\x02\x81\x03a\x12\xECWP_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80a\x12Qa\x12C` \x95a\x12\xAF\x98a\x13\x80V[\x85\x80\x82Q\x83\x01\x01\x91\x01a\x10\xC4V[\x94\x91\x93\x90`@Q\x98\x89\x96\x87\x95\x86\x93\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R\x16`\x04\x84\x01` \x90\x93\x92\x91\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@\x82\x01\x95\x16\x81R\x01RV[\x03\x93\x16Z\xF1\x91\x82\x15a\x05MW`U\x92a\x12\xCFW[P\x01\x80\x91\x11a\x0F\xB6W\x90V[a\x12\xE7\x90` =` \x11a\x02OWa\x02@\x81\x83a\x0E\xF8V[a\x12\xC3V[`\x03\x14a\x12\xF9WPPP\x90V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80a\x13\"a\x12C` \x95a\x12\xAF\x98a\x13\x80V[\x94\x91\x93\x90`@Q\x98\x89\x96\x87\x95\x86\x93\x7F\t^\xA7\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R\x16`\x04\x84\x01` \x90\x93\x92\x91\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@\x82\x01\x95\x16\x81R\x01RV[\x90a\x13\x8B`Ta\x0F9V[\x91a\x13\x99`@Q\x93\x84a\x0E\xF8V[`T\x83R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0a\x13\xC8`Ta\x0F9V[\x016` \x85\x017_[`T\x81\x10a\x13\xDFWPPP\x90V[\x80\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x14\x16a\x14\x10`\x01\x94\x87a\x0F\xA9V[\x85a\x10)V[Q\x16_\x1Aa\x14$\x82\x87a\x10)V[S\x01a\x13\xD1V\xFE\xA2dipfsX\"\x12 \x89\x1Ba\xD0\xA4\xCFO\xA0o\x0E#\r_\x82SI\xFA\xBC\xBC\\\xE4\x0E\xA5\xDC\x14\xEE9\xB6\xDF%\xF6ndsolcC\0\x08\x1E\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436101561001a575b3615610018575f80fd5b005b5f5f3560e01c806307eb213514610db957806308a0167514610d6d5780631b11d0ff146108a15780633f71f2501461058057806346fe962c146102ca5780636ff1c9bc146100e357638da5cb5b14610072575061000e565b346100e057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e057602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b80fd5b50346100e05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e05761011b610e45565b7f00000000000000000000000000000000000000000000000000000000000000009073ffffffffffffffffffffffffffffffffffffffff821633036102a25773ffffffffffffffffffffffffffffffffffffffff16906040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152602081602481865afa908115610297578491610261575b50806101be578380f35b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9290921660048301526024820152906020908290604490829086905af1801561025657610227575b80808380f35b6102489060203d60201161024f575b6102408183610ef8565b810190610fe3565b505f610221565b503d610236565b6040513d84823e3d90fd5b90506020813d60201161028f575b8161027c60209383610ef8565b8101031261028b57515f6101b4565b5f80fd5b3d915061026f565b6040513d86823e3d90fd5b6004837f30cd7471000000000000000000000000000000000000000000000000000000008152fd5b503461028b576102d936610e89565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361055857604051602081016020815273ffffffffffffffffffffffffffffffffffffffff61033f84610e68565b16604083015260208301359283606084015260408101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561028b5781019060208235920167ffffffffffffffff831161028b57823603811361028b57610120857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8661045d976104589660c0608087015281610100870152868601375f85828601015273ffffffffffffffffffffffffffffffffffffffff61040d60608901610e68565b1660a0850152608087013560c085015260a087013560e08501520116810103017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101865285610ef8565b611008565b9173794a61358d6845594f94dc1db02a252b5b4814ad3b1561028b575f927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f73ffffffffffffffffffffffffffffffffffffffff9460c49460405198899788967f42b0b77c000000000000000000000000000000000000000000000000000000008852306004890152166024870152604486015260a060648601525180918160a48701528686015e86858286010152866084850152011681010301818373794a61358d6845594f94dc1db02a252b5b4814ad5af1801561054d57610541575080f35b61001891505f90610ef8565b6040513d5f823e3d90fd5b7f30cd7471000000000000000000000000000000000000000000000000000000005f5260045ffd5b3461028b5761058e36610e89565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff811633036105585760608201906024602073ffffffffffffffffffffffffffffffffffffffff6105f385611008565b16604051928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa90811561054d575f9161086f575b5060408401357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18536030181121561028b5784019081359167ffffffffffffffff831161028b57602001823603811361028b5761069861069d916024943691610f73565b611067565b602073ffffffffffffffffffffffffffffffffffffffff6106bd86611008565b16604051938480927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa801561054d575f9061083b575b6107079250610ffb565b9160808401358310610813576020836107939373ffffffffffffffffffffffffffffffffffffffff61073885611008565b16905f6040518097819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af190811561054d5760a06107e973ffffffffffffffffffffffffffffffffffffffff927f321ae10f17e879f1edb9b9cf44e3d8ba26c2dba15b6d985faf2fe32955675595956020956107f8575b50611008565b956040519586520135941692a3005b61080e90863d881161024f576102408183610ef8565b6107e3565b7fa5adf0af000000000000000000000000000000000000000000000000000000005f5260045ffd5b506020823d602011610867575b8161085560209383610ef8565b8101031261028b5761070791516106fd565b3d9150610848565b90506020813d602011610899575b8161088a60209383610ef8565b8101031261028b575184610634565b3d915061087d565b3461028b5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028b576108d8610e45565b6064359073ffffffffffffffffffffffffffffffffffffffff821680920361028b576084359067ffffffffffffffff821161028b573660238301121561028b57816004013567ffffffffffffffff811161028b57820191602483019336851161028b5773794a61358d6845594f94dc1db02a252b5b4814ad331490811591610d62575b50610d3a5760208184031261028b57602481013567ffffffffffffffff811161028b57019160c0908390031261028b576040519260c0840184811067ffffffffffffffff821117610d0d576040526109b560248401610e68565b845260448301356020850152606483013567ffffffffffffffff811161028b576024908401019080601f8301121561028b578160206109f693359101610f73565b906040840191825273ffffffffffffffffffffffffffffffffffffffff610a1f60848501610e68565b926020606087019480865260c460a060808a019960a48a01358b520197013587526024604051809581937f70a08231000000000000000000000000000000000000000000000000000000008352306004840152165afa91821561054d575f92610cc5575b5073ffffffffffffffffffffffffffffffffffffffff92610aa660209251611067565b6044610ab58135602435610fa9565b5f60405196879485937fa9059cbb00000000000000000000000000000000000000000000000000000000855273794a61358d6845594f94dc1db02a252b5b4814ad60048601526024850152165af191821561054d57602492610ca8575b50602073ffffffffffffffffffffffffffffffffffffffff845116604051938480927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa801561054d575f90610c74575b610b769250610ffb565b925183106108135780516040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690529091602091839160449183915f91165af1801561054d577f321ae10f17e879f1edb9b9cf44e3d8ba26c2dba15b6d985faf2fe329556755959260209273ffffffffffffffffffffffffffffffffffffffff92610c59575b505116925193604051908152a3602060405160018152f35b610c6f90843d861161024f576102408183610ef8565b610c41565b506020823d602011610ca0575b81610c8e60209383610ef8565b8101031261028b57610b769151610b6c565b3d9150610c81565b610cc09060203d60201161024f576102408183610ef8565b610b12565b9091506020813d602011610d05575b81610ce160209383610ef8565b8101031261028b57519073ffffffffffffffffffffffffffffffffffffffff610a83565b3d9150610cd4565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7ff7a632f5000000000000000000000000000000000000000000000000000000005f5260045ffd5b90503014158561095b565b3461028b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028b57602060405173794a61358d6845594f94dc1db02a252b5b4814ad8152f35b3461028b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028b5773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803303610558575f808080934790828215610e3c575bf11561054d57005b506108fc610e34565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361028b57565b359073ffffffffffffffffffffffffffffffffffffffff8216820361028b57565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261028b576004359067ffffffffffffffff821161028b577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8260c09203011261028b5760040190565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d0d57604052565b67ffffffffffffffff8111610d0d57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192610f7f82610f39565b91610f8d6040519384610ef8565b82948184528183011161028b578281602093845f960137010152565b91908201809211610fb657565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9081602091031261028b5751801515810361028b5790565b91908203918211610fb657565b3573ffffffffffffffffffffffffffffffffffffffff8116810361028b5790565b90815181101561103a570160200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b80511561103a57602081015160f81c905f9060015b8360ff84161061108c5750505050565b600161109a60ff92846110ed565b9301169161107c565b519073ffffffffffffffffffffffffffffffffffffffff8216820361028b57565b9081606091031261028b576110d8816110a3565b9160406110e7602084016110a3565b92015190565b905f906110fa8184611029565b5160f81c6001820193848311610fb65784916001810361120e57509061111f91611380565b60608180518101031261028b57611138602082016110a3565b9073ffffffffffffffffffffffffffffffffffffffff60606040830151920151921691823b1561028b5760a45f928360405195869485937f022c0d9f00000000000000000000000000000000000000000000000000000000855260048501526024840152306044840152608060648401528160848401525af1801561054d576111f8575b506055018092116111cb575090565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fd5b6112059192505f90610ef8565b5f9060556111bc565b909350600281036112ec57505f73ffffffffffffffffffffffffffffffffffffffff806112516112436020956112af98611380565b8580825183010191016110c4565b94919390604051988996879586937fa9059cbb00000000000000000000000000000000000000000000000000000000855216600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0393165af191821561054d576055926112cf575b5001809111610fb65790565b6112e79060203d60201161024f576102408183610ef8565b6112c3565b6003146112f95750505090565b5f73ffffffffffffffffffffffffffffffffffffffff806113226112436020956112af98611380565b94919390604051988996879586937f095ea7b300000000000000000000000000000000000000000000000000000000855216600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b9061138b6054610f39565b916113996040519384610ef8565b605483527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06113c86054610f39565b013660208501375f5b605481106113df5750505090565b807fff0000000000000000000000000000000000000000000000000000000000000061141661141060019487610fa9565b85611029565b51165f1a6114248287611029565b53016113d156fea2646970667358221220891b61d0a4cf4fa06f0e230d5f825349fabcbc5ce40ea5dc14ee39b6df25f66e64736f6c634300081e0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x1AW[6\x15a\0\x18W_\x80\xFD[\0[__5`\xE0\x1C\x80c\x07\xEB!5\x14a\r\xB9W\x80c\x08\xA0\x16u\x14a\rmW\x80c\x1B\x11\xD0\xFF\x14a\x08\xA1W\x80c?q\xF2P\x14a\x05\x80W\x80cF\xFE\x96,\x14a\x02\xCAW\x80co\xF1\xC9\xBC\x14a\0\xE3Wc\x8D\xA5\xCB[\x14a\0rWPa\0\x0EV[4a\0\xE0W\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\xE0W` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[\x80\xFD[P4a\0\xE0W` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\xE0Wa\x01\x1Ba\x0EEV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x163\x03a\x02\xA2Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90`@Q\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R0`\x04\x82\x01R` \x81`$\x81\x86Z\xFA\x90\x81\x15a\x02\x97W\x84\x91a\x02aW[P\x80a\x01\xBEW\x83\x80\xF3[`@Q\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x90\x92\x16`\x04\x83\x01R`$\x82\x01R\x90` \x90\x82\x90`D\x90\x82\x90\x86\x90Z\xF1\x80\x15a\x02VWa\x02'W[\x80\x80\x83\x80\xF3[a\x02H\x90` =` \x11a\x02OW[a\x02@\x81\x83a\x0E\xF8V[\x81\x01\x90a\x0F\xE3V[P_a\x02!V[P=a\x026V[`@Q=\x84\x82>=\x90\xFD[\x90P` \x81=` \x11a\x02\x8FW[\x81a\x02|` \x93\x83a\x0E\xF8V[\x81\x01\x03\x12a\x02\x8BWQ_a\x01\xB4V[_\x80\xFD[=\x91Pa\x02oV[`@Q=\x86\x82>=\x90\xFD[`\x04\x83\x7F0\xCDtq\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xFD[P4a\x02\x8BWa\x02\xD96a\x0E\x89V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x163\x03a\x05XW`@Q` \x81\x01` \x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x03?\x84a\x0EhV[\x16`@\x83\x01R` \x83\x015\x92\x83``\x84\x01R`@\x81\x015\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x826\x03\x01\x81\x12\x15a\x02\x8BW\x81\x01\x90` \x825\x92\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x8BW\x826\x03\x81\x13a\x02\x8BWa\x01 \x85\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x86a\x04]\x97a\x04X\x96`\xC0`\x80\x87\x01R\x81a\x01\0\x87\x01R\x86\x86\x017_\x85\x82\x86\x01\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x04\r``\x89\x01a\x0EhV[\x16`\xA0\x85\x01R`\x80\x87\x015`\xC0\x85\x01R`\xA0\x87\x015`\xE0\x85\x01R\x01\x16\x81\x01\x03\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x86R\x85a\x0E\xF8V[a\x10\x08V[\x91syJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD;\x15a\x02\x8BW_\x92\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1Fs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94`\xC4\x94`@Q\x98\x89\x97\x88\x96\x7FB\xB0\xB7|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88R0`\x04\x89\x01R\x16`$\x87\x01R`D\x86\x01R`\xA0`d\x86\x01RQ\x80\x91\x81`\xA4\x87\x01R\x86\x86\x01^\x86\x85\x82\x86\x01\x01R\x86`\x84\x85\x01R\x01\x16\x81\x01\x03\x01\x81\x83syJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xADZ\xF1\x80\x15a\x05MWa\x05AWP\x80\xF3[a\0\x18\x91P_\x90a\x0E\xF8V[`@Q=_\x82>=\x90\xFD[\x7F0\xCDtq\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x02\x8BWa\x05\x8E6a\x0E\x89V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x163\x03a\x05XW``\x82\x01\x90`$` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x05\xF3\x85a\x10\x08V[\x16`@Q\x92\x83\x80\x92\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R0`\x04\x83\x01RZ\xFA\x90\x81\x15a\x05MW_\x91a\x08oW[P`@\x84\x015\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x856\x03\x01\x81\x12\x15a\x02\x8BW\x84\x01\x90\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x8BW` \x01\x826\x03\x81\x13a\x02\x8BWa\x06\x98a\x06\x9D\x91`$\x946\x91a\x0FsV[a\x10gV[` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x06\xBD\x86a\x10\x08V[\x16`@Q\x93\x84\x80\x92\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R0`\x04\x83\x01RZ\xFA\x80\x15a\x05MW_\x90a\x08;W[a\x07\x07\x92Pa\x0F\xFBV[\x91`\x80\x84\x015\x83\x10a\x08\x13W` \x83a\x07\x93\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x078\x85a\x10\x08V[\x16\x90_`@Q\x80\x97\x81\x95\x82\x94\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R`\x04\x84\x01` \x90\x93\x92\x91\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@\x82\x01\x95\x16\x81R\x01RV[\x03\x92Z\xF1\x90\x81\x15a\x05MW`\xA0a\x07\xE9s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x7F2\x1A\xE1\x0F\x17\xE8y\xF1\xED\xB9\xB9\xCFD\xE3\xD8\xBA&\xC2\xDB\xA1[m\x98_\xAF/\xE3)UgU\x95\x95` \x95a\x07\xF8W[Pa\x10\x08V[\x95`@Q\x95\x86R\x015\x94\x16\x92\xA3\0[a\x08\x0E\x90\x86=\x88\x11a\x02OWa\x02@\x81\x83a\x0E\xF8V[a\x07\xE3V[\x7F\xA5\xAD\xF0\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[P` \x82=` \x11a\x08gW[\x81a\x08U` \x93\x83a\x0E\xF8V[\x81\x01\x03\x12a\x02\x8BWa\x07\x07\x91Qa\x06\xFDV[=\x91Pa\x08HV[\x90P` \x81=` \x11a\x08\x99W[\x81a\x08\x8A` \x93\x83a\x0E\xF8V[\x81\x01\x03\x12a\x02\x8BWQ\x84a\x064V[=\x91Pa\x08}V[4a\x02\x8BW`\xA0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x8BWa\x08\xD8a\x0EEV[`d5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x80\x92\x03a\x02\x8BW`\x845\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02\x8BW6`#\x83\x01\x12\x15a\x02\x8BW\x81`\x04\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x8BW\x82\x01\x91`$\x83\x01\x936\x85\x11a\x02\x8BWsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD3\x14\x90\x81\x15\x91a\rbW[Pa\r:W` \x81\x84\x03\x12a\x02\x8BW`$\x81\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x8BW\x01\x91`\xC0\x90\x83\x90\x03\x12a\x02\x8BW`@Q\x92`\xC0\x84\x01\x84\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\r\rW`@Ra\t\xB5`$\x84\x01a\x0EhV[\x84R`D\x83\x015` \x85\x01R`d\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x8BW`$\x90\x84\x01\x01\x90\x80`\x1F\x83\x01\x12\x15a\x02\x8BW\x81` a\t\xF6\x935\x91\x01a\x0FsV[\x90`@\x84\x01\x91\x82Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\n\x1F`\x84\x85\x01a\x0EhV[\x92` ``\x87\x01\x94\x80\x86R`\xC4`\xA0`\x80\x8A\x01\x99`\xA4\x8A\x015\x8BR\x01\x97\x015\x87R`$`@Q\x80\x95\x81\x93\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R0`\x04\x84\x01R\x16Z\xFA\x91\x82\x15a\x05MW_\x92a\x0C\xC5W[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92a\n\xA6` \x92Qa\x10gV[`Da\n\xB5\x815`$5a\x0F\xA9V[_`@Q\x96\x87\x94\x85\x93\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85RsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD`\x04\x86\x01R`$\x85\x01R\x16Z\xF1\x91\x82\x15a\x05MW`$\x92a\x0C\xA8W[P` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84Q\x16`@Q\x93\x84\x80\x92\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R0`\x04\x83\x01RZ\xFA\x80\x15a\x05MW_\x90a\x0CtW[a\x0Bv\x92Pa\x0F\xFBV[\x92Q\x83\x10a\x08\x13W\x80Q`@Q\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x16`\x04\x83\x01R`$\x82\x01\x86\x90R\x90\x91` \x91\x83\x91`D\x91\x83\x91_\x91\x16Z\xF1\x80\x15a\x05MW\x7F2\x1A\xE1\x0F\x17\xE8y\xF1\xED\xB9\xB9\xCFD\xE3\xD8\xBA&\xC2\xDB\xA1[m\x98_\xAF/\xE3)UgU\x95\x92` \x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92a\x0CYW[PQ\x16\x92Q\x93`@Q\x90\x81R\xA3` `@Q`\x01\x81R\xF3[a\x0Co\x90\x84=\x86\x11a\x02OWa\x02@\x81\x83a\x0E\xF8V[a\x0CAV[P` \x82=` \x11a\x0C\xA0W[\x81a\x0C\x8E` \x93\x83a\x0E\xF8V[\x81\x01\x03\x12a\x02\x8BWa\x0Bv\x91Qa\x0BlV[=\x91Pa\x0C\x81V[a\x0C\xC0\x90` =` \x11a\x02OWa\x02@\x81\x83a\x0E\xF8V[a\x0B\x12V[\x90\x91P` \x81=` \x11a\r\x05W[\x81a\x0C\xE1` \x93\x83a\x0E\xF8V[\x81\x01\x03\x12a\x02\x8BWQ\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\n\x83V[=\x91Pa\x0C\xD4V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x7F\xF7\xA62\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x90P0\x14\x15\x85a\t[V[4a\x02\x8BW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x8BW` `@QsyJa5\x8DhEYO\x94\xDC\x1D\xB0*%+[H\x14\xAD\x81R\xF3[4a\x02\x8BW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x8BWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x803\x03a\x05XW_\x80\x80\x80\x93G\x90\x82\x82\x15a\x0E<W[\xF1\x15a\x05MW\0[Pa\x08\xFCa\x0E4V[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\x8BWV[5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\x8BWV[` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC\x82\x01\x12a\x02\x8BW`\x045\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x02\x8BW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC\x82`\xC0\x92\x03\x01\x12a\x02\x8BW`\x04\x01\x90V[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\r\rW`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\r\rW`\x1F\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16` \x01\x90V[\x92\x91\x92a\x0F\x7F\x82a\x0F9V[\x91a\x0F\x8D`@Q\x93\x84a\x0E\xF8V[\x82\x94\x81\x84R\x81\x83\x01\x11a\x02\x8BW\x82\x81` \x93\x84_\x96\x017\x01\x01RV[\x91\x90\x82\x01\x80\x92\x11a\x0F\xB6WV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\x02\x8BWQ\x80\x15\x15\x81\x03a\x02\x8BW\x90V[\x91\x90\x82\x03\x91\x82\x11a\x0F\xB6WV[5s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x02\x8BW\x90V[\x90\x81Q\x81\x10\x15a\x10:W\x01` \x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x80Q\x15a\x10:W` \x81\x01Q`\xF8\x1C\x90_\x90`\x01[\x83`\xFF\x84\x16\x10a\x10\x8CWPPPPV[`\x01a\x10\x9A`\xFF\x92\x84a\x10\xEDV[\x93\x01\x16\x91a\x10|V[Q\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\x02\x8BWV[\x90\x81``\x91\x03\x12a\x02\x8BWa\x10\xD8\x81a\x10\xA3V[\x91`@a\x10\xE7` \x84\x01a\x10\xA3V[\x92\x01Q\x90V[\x90_\x90a\x10\xFA\x81\x84a\x10)V[Q`\xF8\x1C`\x01\x82\x01\x93\x84\x83\x11a\x0F\xB6W\x84\x91`\x01\x81\x03a\x12\x0EWP\x90a\x11\x1F\x91a\x13\x80V[``\x81\x80Q\x81\x01\x03\x12a\x02\x8BWa\x118` \x82\x01a\x10\xA3V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF```@\x83\x01Q\x92\x01Q\x92\x16\x91\x82;\x15a\x02\x8BW`\xA4_\x92\x83`@Q\x95\x86\x94\x85\x93\x7F\x02,\r\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R`\x04\x85\x01R`$\x84\x01R0`D\x84\x01R`\x80`d\x84\x01R\x81`\x84\x84\x01RZ\xF1\x80\x15a\x05MWa\x11\xF8W[P`U\x01\x80\x92\x11a\x11\xCBWP\x90V[\x80\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`$\x92R`\x11`\x04R\xFD[a\x12\x05\x91\x92P_\x90a\x0E\xF8V[_\x90`Ua\x11\xBCV[\x90\x93P`\x02\x81\x03a\x12\xECWP_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80a\x12Qa\x12C` \x95a\x12\xAF\x98a\x13\x80V[\x85\x80\x82Q\x83\x01\x01\x91\x01a\x10\xC4V[\x94\x91\x93\x90`@Q\x98\x89\x96\x87\x95\x86\x93\x7F\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R\x16`\x04\x84\x01` \x90\x93\x92\x91\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@\x82\x01\x95\x16\x81R\x01RV[\x03\x93\x16Z\xF1\x91\x82\x15a\x05MW`U\x92a\x12\xCFW[P\x01\x80\x91\x11a\x0F\xB6W\x90V[a\x12\xE7\x90` =` \x11a\x02OWa\x02@\x81\x83a\x0E\xF8V[a\x12\xC3V[`\x03\x14a\x12\xF9WPPP\x90V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80a\x13\"a\x12C` \x95a\x12\xAF\x98a\x13\x80V[\x94\x91\x93\x90`@Q\x98\x89\x96\x87\x95\x86\x93\x7F\t^\xA7\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R\x16`\x04\x84\x01` \x90\x93\x92\x91\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@\x82\x01\x95\x16\x81R\x01RV[\x90a\x13\x8B`Ta\x0F9V[\x91a\x13\x99`@Q\x93\x84a\x0E\xF8V[`T\x83R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0a\x13\xC8`Ta\x0F9V[\x016` \x85\x017_[`T\x81\x10a\x13\xDFWPPP\x90V[\x80\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x14\x16a\x14\x10`\x01\x94\x87a\x0F\xA9V[\x85a\x10)V[Q\x16_\x1Aa\x14$\x82\x87a\x10)V[S\x01a\x13\xD1V\xFE\xA2dipfsX\"\x12 \x89\x1Ba\xD0\xA4\xCFO\xA0o\x0E#\r_\x82SI\xFA\xBC\xBC\\\xE4\x0E\xA5\xDC\x14\xEE9\xB6\xDF%\xF6ndsolcC\0\x08\x1E\x003",
    );
    /**```solidity
struct ArbParams { address tokenIn; uint256 amountIn; bytes swapData; address profitToken; uint256 minProfit; bytes32 tag; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ArbParams {
        #[allow(missing_docs)]
        pub tokenIn: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amountIn: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub swapData: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub profitToken: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub minProfit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub tag: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Bytes,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ArbParams> for UnderlyingRustTuple<'_> {
            fn from(value: ArbParams) -> Self {
                (
                    value.tokenIn,
                    value.amountIn,
                    value.swapData,
                    value.profitToken,
                    value.minProfit,
                    value.tag,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ArbParams {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tokenIn: tuple.0,
                    amountIn: tuple.1,
                    swapData: tuple.2,
                    profitToken: tuple.3,
                    minProfit: tuple.4,
                    tag: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ArbParams {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ArbParams {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.tokenIn,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amountIn),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.swapData,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.profitToken,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.minProfit),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.tag),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ArbParams {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ArbParams {
            const NAME: &'static str = "ArbParams";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ArbParams(address tokenIn,uint256 amountIn,bytes swapData,address profitToken,uint256 minProfit,bytes32 tag)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.tokenIn,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.amountIn)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.swapData,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.profitToken,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.minProfit)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tag)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ArbParams {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tokenIn,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amountIn,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.swapData,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.profitToken,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.minProfit,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.tag)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tokenIn,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amountIn,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.swapData,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.profitToken,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.minProfit,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.tag, out);
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `InvalidCallback()` and selector `0xf7a632f5`.
```solidity
error InvalidCallback();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidCallback {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidCallback> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidCallback) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidCallback {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidCallback {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidCallback()";
            const SELECTOR: [u8; 4] = [247u8, 166u8, 50u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotOwner()` and selector `0x30cd7471`.
```solidity
error NotOwner();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotOwner {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotOwner> for UnderlyingRustTuple<'_> {
            fn from(value: NotOwner) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotOwner()";
            const SELECTOR: [u8; 4] = [48u8, 205u8, 116u8, 113u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotProfitable()` and selector `0xa5adf0af`.
```solidity
error NotProfitable();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotProfitable {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotProfitable> for UnderlyingRustTuple<'_> {
            fn from(value: NotProfitable) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotProfitable {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotProfitable {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotProfitable()";
            const SELECTOR: [u8; 4] = [165u8, 173u8, 240u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `TransferFailed()` and selector `0x90b8ec18`.
```solidity
error TransferFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransferFailed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransferFailed> for UnderlyingRustTuple<'_> {
            fn from(value: TransferFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TransferFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransferFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransferFailed()";
            const SELECTOR: [u8; 4] = [144u8, 184u8, 236u8, 24u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `ArbExecuted(address,uint256,bytes32)` and selector `0x321ae10f17e879f1edb9b9cf44e3d8ba26c2dba15b6d985faf2fe32955675595`.
```solidity
event ArbExecuted(address indexed token, uint256 profit, bytes32 indexed tag);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ArbExecuted {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub profit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub tag: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ArbExecuted {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "ArbExecuted(address,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                50u8,
                26u8,
                225u8,
                15u8,
                23u8,
                232u8,
                121u8,
                241u8,
                237u8,
                185u8,
                185u8,
                207u8,
                68u8,
                227u8,
                216u8,
                186u8,
                38u8,
                194u8,
                219u8,
                161u8,
                91u8,
                109u8,
                152u8,
                95u8,
                175u8,
                47u8,
                227u8,
                41u8,
                85u8,
                103u8,
                85u8,
                149u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    token: topics.1,
                    profit: data.0,
                    tag: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.profit),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.token.clone(), self.tag.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.token,
                );
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.tag);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ArbExecuted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ArbExecuted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ArbExecuted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `AAVE_POOL()` and selector `0x08a01675`.
```solidity
function AAVE_POOL() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AAVE_POOLCall {}
    ///Container type for the return parameters of the [`AAVE_POOL()`](AAVE_POOLCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AAVE_POOLReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AAVE_POOLCall> for UnderlyingRustTuple<'_> {
                fn from(value: AAVE_POOLCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for AAVE_POOLCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AAVE_POOLReturn> for UnderlyingRustTuple<'_> {
                fn from(value: AAVE_POOLReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for AAVE_POOLReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for AAVE_POOLCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = AAVE_POOLReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AAVE_POOL()";
            const SELECTOR: [u8; 4] = [8u8, 160u8, 22u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `emergencyWithdraw(address)` and selector `0x6ff1c9bc`.
```solidity
function emergencyWithdraw(address token) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emergencyWithdrawCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`emergencyWithdraw(address)`](emergencyWithdrawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emergencyWithdrawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emergencyWithdrawCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: emergencyWithdrawCall) -> Self {
                    (value.token,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for emergencyWithdrawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { token: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emergencyWithdrawReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: emergencyWithdrawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for emergencyWithdrawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for emergencyWithdrawCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = emergencyWithdrawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "emergencyWithdraw(address)";
            const SELECTOR: [u8; 4] = [111u8, 241u8, 201u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `emergencyWithdrawNative()` and selector `0x07eb2135`.
```solidity
function emergencyWithdrawNative() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emergencyWithdrawNativeCall {}
    ///Container type for the return parameters of the [`emergencyWithdrawNative()`](emergencyWithdrawNativeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct emergencyWithdrawNativeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emergencyWithdrawNativeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: emergencyWithdrawNativeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for emergencyWithdrawNativeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<emergencyWithdrawNativeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: emergencyWithdrawNativeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for emergencyWithdrawNativeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for emergencyWithdrawNativeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = emergencyWithdrawNativeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "emergencyWithdrawNative()";
            const SELECTOR: [u8; 4] = [7u8, 235u8, 33u8, 53u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeArb((address,uint256,bytes,address,uint256,bytes32))` and selector `0x3f71f250`.
```solidity
function executeArb(ArbParams memory params) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeArbCall {
        #[allow(missing_docs)]
        pub params: <ArbParams as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`executeArb((address,uint256,bytes,address,uint256,bytes32))`](executeArbCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeArbReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ArbParams,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ArbParams as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeArbCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeArbCall) -> Self {
                    (value.params,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeArbCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { params: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeArbReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeArbReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeArbReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeArbCall {
            type Parameters<'a> = (ArbParams,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeArbReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeArb((address,uint256,bytes,address,uint256,bytes32))";
            const SELECTOR: [u8; 4] = [63u8, 113u8, 242u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<ArbParams as alloy_sol_types::SolType>::tokenize(&self.params),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeArbWithFlash((address,uint256,bytes,address,uint256,bytes32))` and selector `0x46fe962c`.
```solidity
function executeArbWithFlash(ArbParams memory params) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeArbWithFlashCall {
        #[allow(missing_docs)]
        pub params: <ArbParams as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`executeArbWithFlash((address,uint256,bytes,address,uint256,bytes32))`](executeArbWithFlashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeArbWithFlashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ArbParams,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ArbParams as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeArbWithFlashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeArbWithFlashCall) -> Self {
                    (value.params,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeArbWithFlashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { params: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeArbWithFlashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeArbWithFlashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeArbWithFlashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeArbWithFlashCall {
            type Parameters<'a> = (ArbParams,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeArbWithFlashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeArbWithFlash((address,uint256,bytes,address,uint256,bytes32))";
            const SELECTOR: [u8; 4] = [70u8, 254u8, 150u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<ArbParams as alloy_sol_types::SolType>::tokenize(&self.params),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeOperation(address,uint256,uint256,address,bytes)` and selector `0x1b11d0ff`.
```solidity
function executeOperation(address asset, uint256 amount, uint256 premium, address initiator, bytes memory params) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOperationCall {
        #[allow(missing_docs)]
        pub asset: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub premium: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub initiator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub params: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeOperation(address,uint256,uint256,address,bytes)`](executeOperationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeOperationReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOperationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeOperationCall) -> Self {
                    (
                        value.asset,
                        value.amount,
                        value.premium,
                        value.initiator,
                        value.params,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeOperationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        asset: tuple.0,
                        amount: tuple.1,
                        premium: tuple.2,
                        initiator: tuple.3,
                        params: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeOperationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: executeOperationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for executeOperationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeOperationCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeOperationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeOperation(address,uint256,uint256,address,bytes)";
            const SELECTOR: [u8; 4] = [27u8, 17u8, 208u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.asset,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.premium),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.initiator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.params,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AvaxArbExecutor`](self) function calls.
    pub enum AvaxArbExecutorCalls {
        #[allow(missing_docs)]
        AAVE_POOL(AAVE_POOLCall),
        #[allow(missing_docs)]
        emergencyWithdraw(emergencyWithdrawCall),
        #[allow(missing_docs)]
        emergencyWithdrawNative(emergencyWithdrawNativeCall),
        #[allow(missing_docs)]
        executeArb(executeArbCall),
        #[allow(missing_docs)]
        executeArbWithFlash(executeArbWithFlashCall),
        #[allow(missing_docs)]
        executeOperation(executeOperationCall),
        #[allow(missing_docs)]
        owner(ownerCall),
    }
    #[automatically_derived]
    impl AvaxArbExecutorCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [7u8, 235u8, 33u8, 53u8],
            [8u8, 160u8, 22u8, 117u8],
            [27u8, 17u8, 208u8, 255u8],
            [63u8, 113u8, 242u8, 80u8],
            [70u8, 254u8, 150u8, 44u8],
            [111u8, 241u8, 201u8, 188u8],
            [141u8, 165u8, 203u8, 91u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AvaxArbExecutorCalls {
        const NAME: &'static str = "AvaxArbExecutorCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AAVE_POOL(_) => {
                    <AAVE_POOLCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::emergencyWithdraw(_) => {
                    <emergencyWithdrawCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::emergencyWithdrawNative(_) => {
                    <emergencyWithdrawNativeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeArb(_) => {
                    <executeArbCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeArbWithFlash(_) => {
                    <executeArbWithFlashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeOperation(_) => {
                    <executeOperationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AvaxArbExecutorCalls>] = &[
                {
                    fn emergencyWithdrawNative(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AvaxArbExecutorCalls> {
                        <emergencyWithdrawNativeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AvaxArbExecutorCalls::emergencyWithdrawNative)
                    }
                    emergencyWithdrawNative
                },
                {
                    fn AAVE_POOL(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AvaxArbExecutorCalls> {
                        <AAVE_POOLCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AvaxArbExecutorCalls::AAVE_POOL)
                    }
                    AAVE_POOL
                },
                {
                    fn executeOperation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AvaxArbExecutorCalls> {
                        <executeOperationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AvaxArbExecutorCalls::executeOperation)
                    }
                    executeOperation
                },
                {
                    fn executeArb(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AvaxArbExecutorCalls> {
                        <executeArbCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AvaxArbExecutorCalls::executeArb)
                    }
                    executeArb
                },
                {
                    fn executeArbWithFlash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AvaxArbExecutorCalls> {
                        <executeArbWithFlashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AvaxArbExecutorCalls::executeArbWithFlash)
                    }
                    executeArbWithFlash
                },
                {
                    fn emergencyWithdraw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AvaxArbExecutorCalls> {
                        <emergencyWithdrawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AvaxArbExecutorCalls::emergencyWithdraw)
                    }
                    emergencyWithdraw
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AvaxArbExecutorCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AvaxArbExecutorCalls::owner)
                    }
                    owner
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AAVE_POOL(inner) => {
                    <AAVE_POOLCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::emergencyWithdraw(inner) => {
                    <emergencyWithdrawCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::emergencyWithdrawNative(inner) => {
                    <emergencyWithdrawNativeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeArb(inner) => {
                    <executeArbCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::executeArbWithFlash(inner) => {
                    <executeArbWithFlashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::executeOperation(inner) => {
                    <executeOperationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AAVE_POOL(inner) => {
                    <AAVE_POOLCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::emergencyWithdraw(inner) => {
                    <emergencyWithdrawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::emergencyWithdrawNative(inner) => {
                    <emergencyWithdrawNativeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeArb(inner) => {
                    <executeArbCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeArbWithFlash(inner) => {
                    <executeArbWithFlashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeOperation(inner) => {
                    <executeOperationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`AvaxArbExecutor`](self) custom errors.
    pub enum AvaxArbExecutorErrors {
        #[allow(missing_docs)]
        InvalidCallback(InvalidCallback),
        #[allow(missing_docs)]
        NotOwner(NotOwner),
        #[allow(missing_docs)]
        NotProfitable(NotProfitable),
        #[allow(missing_docs)]
        TransferFailed(TransferFailed),
    }
    #[automatically_derived]
    impl AvaxArbExecutorErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [48u8, 205u8, 116u8, 113u8],
            [144u8, 184u8, 236u8, 24u8],
            [165u8, 173u8, 240u8, 175u8],
            [247u8, 166u8, 50u8, 245u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AvaxArbExecutorErrors {
        const NAME: &'static str = "AvaxArbExecutorErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidCallback(_) => {
                    <InvalidCallback as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotOwner(_) => <NotOwner as alloy_sol_types::SolError>::SELECTOR,
                Self::NotProfitable(_) => {
                    <NotProfitable as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransferFailed(_) => {
                    <TransferFailed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AvaxArbExecutorErrors>] = &[
                {
                    fn NotOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AvaxArbExecutorErrors> {
                        <NotOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AvaxArbExecutorErrors::NotOwner)
                    }
                    NotOwner
                },
                {
                    fn TransferFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AvaxArbExecutorErrors> {
                        <TransferFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AvaxArbExecutorErrors::TransferFailed)
                    }
                    TransferFailed
                },
                {
                    fn NotProfitable(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AvaxArbExecutorErrors> {
                        <NotProfitable as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AvaxArbExecutorErrors::NotProfitable)
                    }
                    NotProfitable
                },
                {
                    fn InvalidCallback(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AvaxArbExecutorErrors> {
                        <InvalidCallback as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AvaxArbExecutorErrors::InvalidCallback)
                    }
                    InvalidCallback
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidCallback(inner) => {
                    <InvalidCallback as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotOwner(inner) => {
                    <NotOwner as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NotProfitable(inner) => {
                    <NotProfitable as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::TransferFailed(inner) => {
                    <TransferFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidCallback(inner) => {
                    <InvalidCallback as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotOwner(inner) => {
                    <NotOwner as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::NotProfitable(inner) => {
                    <NotProfitable as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransferFailed(inner) => {
                    <TransferFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`AvaxArbExecutor`](self) events.
    pub enum AvaxArbExecutorEvents {
        #[allow(missing_docs)]
        ArbExecuted(ArbExecuted),
    }
    #[automatically_derived]
    impl AvaxArbExecutorEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                50u8,
                26u8,
                225u8,
                15u8,
                23u8,
                232u8,
                121u8,
                241u8,
                237u8,
                185u8,
                185u8,
                207u8,
                68u8,
                227u8,
                216u8,
                186u8,
                38u8,
                194u8,
                219u8,
                161u8,
                91u8,
                109u8,
                152u8,
                95u8,
                175u8,
                47u8,
                227u8,
                41u8,
                85u8,
                103u8,
                85u8,
                149u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for AvaxArbExecutorEvents {
        const NAME: &'static str = "AvaxArbExecutorEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ArbExecuted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ArbExecuted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ArbExecuted)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for AvaxArbExecutorEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ArbExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ArbExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AvaxArbExecutor`](self) contract instance.

See the [wrapper's documentation](`AvaxArbExecutorInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AvaxArbExecutorInstance<T, P, N> {
        AvaxArbExecutorInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AvaxArbExecutorInstance<T, P, N>>,
    > {
        AvaxArbExecutorInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AvaxArbExecutorInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`AvaxArbExecutor`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AvaxArbExecutor`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AvaxArbExecutorInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AvaxArbExecutorInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AvaxArbExecutorInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AvaxArbExecutorInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AvaxArbExecutor`](self) contract instance.

See the [wrapper's documentation](`AvaxArbExecutorInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<AvaxArbExecutorInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AvaxArbExecutorInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AvaxArbExecutorInstance<T, P, N> {
            AvaxArbExecutorInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AvaxArbExecutorInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`AAVE_POOL`] function.
        pub fn AAVE_POOL(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, AAVE_POOLCall, N> {
            self.call_builder(&AAVE_POOLCall {})
        }
        ///Creates a new call builder for the [`emergencyWithdraw`] function.
        pub fn emergencyWithdraw(
            &self,
            token: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, emergencyWithdrawCall, N> {
            self.call_builder(&emergencyWithdrawCall { token })
        }
        ///Creates a new call builder for the [`emergencyWithdrawNative`] function.
        pub fn emergencyWithdrawNative(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, emergencyWithdrawNativeCall, N> {
            self.call_builder(&emergencyWithdrawNativeCall {})
        }
        ///Creates a new call builder for the [`executeArb`] function.
        pub fn executeArb(
            &self,
            params: <ArbParams as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeArbCall, N> {
            self.call_builder(&executeArbCall { params })
        }
        ///Creates a new call builder for the [`executeArbWithFlash`] function.
        pub fn executeArbWithFlash(
            &self,
            params: <ArbParams as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeArbWithFlashCall, N> {
            self.call_builder(&executeArbWithFlashCall { params })
        }
        ///Creates a new call builder for the [`executeOperation`] function.
        pub fn executeOperation(
            &self,
            asset: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
            premium: alloy::sol_types::private::primitives::aliases::U256,
            initiator: alloy::sol_types::private::Address,
            params: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeOperationCall, N> {
            self.call_builder(
                &executeOperationCall {
                    asset,
                    amount,
                    premium,
                    initiator,
                    params,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AvaxArbExecutorInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ArbExecuted`] event.
        pub fn ArbExecuted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ArbExecuted, N> {
            self.event_filter::<ArbExecuted>()
        }
    }
}
